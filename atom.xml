<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>威立山</title>
  <subtitle>记录心路历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-04T06:10:35.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Willishine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Value and Reference Type</title>
    <link href="http://yoursite.com/2017/06/03/Value-and-Reference-Type/"/>
    <id>http://yoursite.com/2017/06/03/Value-and-Reference-Type/</id>
    <published>2017-06-03T13:17:03.000Z</published>
    <updated>2017-06-04T06:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift中值类型和引用类型"><a href="#Swift中值类型和引用类型" class="headerlink" title="Swift中值类型和引用类型"></a>Swift中值类型和引用类型</h1><p><em>本文主要介绍值类型、以及使用Struct作为数据模型的注意事项</em></p>
<h2 id="值类型（value-type）"><a href="#值类型（value-type）" class="headerlink" title="值类型（value type）"></a>值类型（value type）</h2><p><strong>值类型：</strong>每次分配给变量/常量或者作为参数传递到函数时，都会重新创建（复制）一个新的实例。</p>
<p>Swift 中的所有的内建类型都是值类型，不仅包括了传统意义像 Int，Double这些，甚至连 String，Array 以及 Dictionary 都是值类型的(与OC不同), swift中所有的Struct 和 enum 都是值类型，值类型每次初始化以后，将它分配或者传递时，实际上是分配或传递了它的一个拷贝。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x : <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> y : <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(x:<span class="type">Int</span>, y:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.x = x</div><div class="line">        <span class="keyword">self</span>.y = y</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> aPoint = <span class="type">Point</span>(x: <span class="number">10</span>, y: <span class="number">10</span>)</div><div class="line"> <span class="keyword">var</span> bPoint = aPoint</div><div class="line"> bPoint.x = <span class="number">5</span></div><div class="line"> <span class="built_in">print</span>(aPoint)</div><div class="line"> <span class="built_in">print</span>(bPoint)</div></pre></td></tr></table></figure>
<p><strong>打印结果</strong></p>
<p>Point(x: 10, y: 10)</p>
<p>Point(x: 5, y: 10)</p>
<p><strong>总结</strong>：</p>
<ol>
<li>赋值给新变量，会产生一个单独的、没有数据共享的新实例.</li>
<li>值类型在复制时，会将存储在其中的值类型一并进行复制，而对于其中的引用类型的话，则只复制一份引用。</li>
<li>复制时机，是在值类型中的内容发生改变时！值类型每次复制会增加额外开销，Swift将这种开销控制在最小的范围内，在没有必要复制时，复制是不会发生的。~(≧▽≦)/~</li>
</ol>
<p><strong>线程安全：</strong><br>    在Swift中，Array、String、Dictionary都是值类型。它们的使用方式类似C语言中得int，每一个实例都有一份数据。你不需要进行显示的复制操作去防止数据在你不知情的情况下被修改。更重要的是，你可以跨线程进行传参而不需要考虑同步的问题，因为传递值类型很安全。（<a href="https://developer.apple.com/swift/blog/?id=10" target="_blank" rel="external">Swift官方博客</a>）</p>
<h2 id="引用类型（Reference-Types）"><a href="#引用类型（Reference-Types）" class="headerlink" title="引用类型（Reference Types）"></a>引用类型（Reference Types）</h2><p><strong>引用类型</strong>：引用类型初始化后，无论是分配给变量还是常量，或是通过参数传递给函数，都将是同一个实例对象。<br>NSObject再熟悉不过了，当在分配或传递是都是引用，都指向那个原始对象。不再多说了~</p>
<h2 id="Struct数据模型"><a href="#Struct数据模型" class="headerlink" title="Struct数据模型"></a>Struct数据模型</h2><p><strong>处理数据结构时有时会用Struct进行处理，使用 Struct 来代替 Class 作为数据模型有很多好处。值类型是非常有优势的：</strong></p>
<ul>
<li>安全性 ：因为 Struct 是用值类型传递的，它们没有引用计数。</li>
<li>内存：由于他们没有引用数，他们不会因为循环引用导致内存泄漏。</li>
<li>速度：值类型通常来说是以栈的形式分配的，而不是用堆。因此他们比 Class 要快很多，真的很多！在 <a href="https://stackoverflow.com/questions/24232799/why-choose-struct-over-class/24232845" target="_blank" rel="external">StackOverflow</a> 给 Struct 和 Class 进行相同操作的表现做了基准测试，Struct 比 Class 要快九百倍。</li>
<li>拷贝：在 Objective-C 里拷贝一个对象,你必须选用正确的拷贝类型（深拷贝、浅拷贝），这是非常烦人的，值类型的拷贝则非常轻松！</li>
<li>线程安全：值类型是自动线程安全的。无论你从哪个线程去访问你的 Struct ，都非常简单。</li>
</ul>
<p><strong>Struct的缺点：</strong></p>
<ul>
<li>OC无法调用Swift的Struct，当你的项目的代码是 Swift 和 Objective-C 混合开发时，你会发现在 Objective-C 的代码里无法调用 Swift 的 Struct。因为要在 Objective-C 里调用 Swift 代码的话，对象需要继承于 NSObject。</li>
<li>不能继承，继承是面向对象编程的四大特性之一，没有继承就不能抽象一个统一模型</li>
<li>Struct 不能被序列化成 NSData 对象。某些时候会把数据存在 NSUserDefaults 里，而Struct 转化成NSData，技术可行但坑多</li>
</ul>
<p>参考：</p>
<p><a href="http://swifter.tips/value-reference/" target="_blank" rel="external">王巍Swift Tips</a></p>
<p><a href="http://swift.gg/2016/07/22/swift-caveats-for-structs-as-data-models/" target="_blank" rel="external">SwiftGG</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift中值类型和引用类型&quot;&gt;&lt;a href=&quot;#Swift中值类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;Swift中值类型和引用类型&quot;&gt;&lt;/a&gt;Swift中值类型和引用类型&lt;/h1&gt;&lt;p&gt;&lt;em&gt;本文主要介绍值类型、以及使用Stru
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>My Heart Will Go On</title>
    <link href="http://yoursite.com/2017/06/03/My-Heart-Will-Go-On/"/>
    <id>http://yoursite.com/2017/06/03/My-Heart-Will-Go-On/</id>
    <published>2017-06-03T13:15:20.000Z</published>
    <updated>2017-06-04T05:57:39.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="慢时光" scheme="http://yoursite.com/tags/%E6%85%A2%E6%97%B6%E5%85%89/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="梦想" scheme="http://yoursite.com/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/01/02/hello-world/"/>
    <id>http://yoursite.com/2017/01/02/hello-world/</id>
    <published>2017-01-02T15:52:46.000Z</published>
    <updated>2017-01-02T15:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
