<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>威立山</title>
  <subtitle>记录心路历程</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-09-14T16:14:48.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Willishine</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python爬虫</title>
    <link href="http://yoursite.com/2017/09/15/python%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2017/09/15/python爬虫/</id>
    <published>2017-09-14T16:14:48.000Z</published>
    <updated>2017-09-14T16:14:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>RxSwift实践</title>
    <link href="http://yoursite.com/2017/09/03/RxSwift%E5%AE%9E%E8%B7%B5/"/>
    <id>http://yoursite.com/2017/09/03/RxSwift实践/</id>
    <published>2017-09-03T09:55:55.000Z</published>
    <updated>2017-09-03T09:55:55.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NSURLProtocol黑魔法</title>
    <link href="http://yoursite.com/2017/06/29/NSURLProtocol%E9%BB%91%E9%AD%94%E6%B3%95/"/>
    <id>http://yoursite.com/2017/06/29/NSURLProtocol黑魔法/</id>
    <published>2017-06-29T15:33:54.000Z</published>
    <updated>2017-07-01T05:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><blockquote>
<p>实际应用：在公司的海外项目中，在App中嵌入YouTube网页，当进入一个视频详情页时，视频会自动播放。而需求是不要自动播放，让用户点击我们自定义的播放按钮把视频投到电视上播放。下面让我们一起学习下如何拦截网络请求。</p>
</blockquote>
<h1 id="URL-Loading-System"><a href="#URL-Loading-System" class="headerlink" title="URL Loading System"></a>URL Loading System</h1><p><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fh2yx18u8oj312q0o8q8a.jpg" alt="URL Loading System"><br>如图所示，URL Loading System是iOS一系列网络请求类的集合，包括已经过期不用的NSConnection和现在流行的NSURLSession，还包括一些请求认证的类，一个sessionConfig的类，还有关于处理请求缓存的类等，当然还包括我们要说的这个NSURLProtocol类。</p>
<h1 id="NSURLProtocol"><a href="#NSURLProtocol" class="headerlink" title="NSURLProtocol"></a>NSURLProtocol</h1><p>   NSURLProtocol可以让我们拦截程序中的一切网络请求，因为NSURLProtocol是一个虚基类，所以不能直接使用它，要想使用它就必须自定义一个类成为他的子类，然后实现他里面的必须实现的一些方法。主要进行如下拦截处理:</p>
<ul>
<li>自定义请求 和 响应</li>
<li>过滤掉某些请求不让其发起、以及修改</li>
<li>提供 自定义的全局缓存 逻辑</li>
<li>重定向 网络请求</li>
<li>提供 HTTP Mocking (方便前期测试)</li>
</ul>
<h1 id="如何拦截网络请求"><a href="#如何拦截网络请求" class="headerlink" title="如何拦截网络请求"></a>如何拦截网络请求</h1><h2 id="注册自定义的URLProtocol子类"><a href="#注册自定义的URLProtocol子类" class="headerlink" title="注册自定义的URLProtocol子类"></a>注册自定义的URLProtocol子类</h2><ul>
<li>在appDelegate中，注册自己拦截请求的URLProtocol子类;相对应的也有unregistClass方法，不让某个子类起作用</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">   </div><div class="line">   [<span class="built_in">NSURLProtocol</span> registerClass:[WSURLProtocol <span class="keyword">class</span>]];</div><div class="line">   </div><div class="line">   <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="子类必须实现的方法"><a href="#子类必须实现的方法" class="headerlink" title="子类必须实现的方法"></a>子类必须实现的方法</h2><ul>
<li><code>+ (BOOL)canInitWithRequest:(NSURLRequest *)request</code><br>每次有一个请求的时候都会调用这个方法，在这个方法里面判断这个请求是否需要被处理拦截，如果返回YES就代表这个request需要被处理，反之就是不需要被处理。</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">BOOL</span>)canInitWithRequest:(<span class="built_in">NSURLRequest</span> *)request &#123;</div><div class="line">	<span class="comment">//判断是否处理过，防止死循环</span></div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSURLProtocol</span> propertyForKey:protocolKey inRequest:request]) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//只拦截http和https请求</span></div><div class="line">    <span class="built_in">NSString</span> *scheme = [[request URL] scheme];</div><div class="line">    <span class="keyword">if</span> ([scheme caseInsensitiveCompare:<span class="string">@"http"</span>] == <span class="built_in">NSOrderedSame</span> ||</div><div class="line">        [scheme caseInsensitiveCompare:<span class="string">@"https"</span>] == <span class="built_in">NSOrderedSame</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><code>+ (NSURLRequest *) canonicalRequestForRequest:(NSURLRequest *)request</code>  通常该方法你可以简单的直接返回request，但也可以在这里修改request，比如添加header，修改host等，并返回一个新的request，这是个抽象方法，子类必须实现。  </li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+ (<span class="built_in">NSURLRequest</span> *)canonicalRequestForRequest:	(<span class="built_in">NSURLRequest</span> *)request &#123;</div><div class="line">    <span class="built_in">NSMutableURLRequest</span> *request = [request mutableCopy];</div><div class="line">    <span class="comment">//把访问百度的request改为访问Google了</span></div><div class="line">    request.URL = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.google.com"</span>];</div><div class="line">    <span class="keyword">return</span> request;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>+ (BOOL)requestIsCacheEquivalent:(NSURLRequest *)a toRequest:(NSURLRequest *)b</code>  可用来使用缓存数据结束此次网络请求</p>
</li>
<li><p><code>- (void)startLoading</code>  开始请求</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)startLoading &#123;</div><div class="line">	<span class="built_in">NSMutableURLRequest</span> *request = [<span class="keyword">self</span>.request mutableCopy];</div><div class="line">	<span class="comment">// 标记request已处理    </span></div><div class="line">    [<span class="built_in">NSURLProtocol</span> setProperty:@(<span class="literal">YES</span>) forKey:protocolKey inRequest:request];</div><div class="line">    </div><div class="line">    <span class="comment">//使用NSURLSession继续把重定向的request发送出去</span></div><div class="line">    <span class="built_in">NSURLSessionConfiguration</span> *config = [<span class="built_in">NSURLSessionConfiguration</span> ephemeralSessionConfiguration];</div><div class="line">    <span class="built_in">NSOperationQueue</span> *mainQueue = [<span class="built_in">NSOperationQueue</span> mainQueue];</div><div class="line">    </div><div class="line">    <span class="built_in">NSURLSession</span> *session = [<span class="built_in">NSURLSession</span> sessionWithConfiguration:config delegate:<span class="keyword">self</span> delegateQueue:mainQueue];</div><div class="line">    </div><div class="line">    <span class="built_in">NSURLSessionDataTask</span> *task = [session dataTaskWithRequest:request];</div><div class="line">    </div><div class="line">    [task resume];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>-(void)stopLoading</code>  停止请求的方法，也是要实现的。</p>
<h1 id="NSURLProtocolClient"><a href="#NSURLProtocolClient" class="headerlink" title="NSURLProtocolClient"></a>NSURLProtocolClient</h1><p>如果我们使用UIWebView发送一个request，拦截以后当我们使用NSURLSession发出了request，那么这个request的response是无法回到这个UIWebView的，因为可以理解成不是同一个地方发出的request，这个response只能有session来处理，那我们怎么才能让这个response回到刚开始的UIWebView呢？</p>
<p>NSURLProtocolClient就可以看做是URL Loading System，我们把response告诉client，也就是URL Loading System，让他来继续处理这个response，因为一切都是基于URL Loading System发生的，所以把response交给他，他会自动处理这个response回到webView。  </p>
<p>每一个NSURLProtocol的子类都有一个client对象来处理请求得到的response。其实下面这些写法都是差不多固定的。</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session task:(<span class="built_in">NSURLSessionTask</span> *)task didCompleteWithError:(<span class="built_in">NSError</span> *)error &#123;</div><div class="line">    <span class="keyword">if</span> (error) &#123;</div><div class="line">        [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didFailWithError:error];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        [<span class="keyword">self</span>.client URLProtocolDidFinishLoading:<span class="keyword">self</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveResponse:(<span class="built_in">NSURLResponse</span> *)response completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSURLSessionResponseDisposition</span>))completionHandler &#123;</div><div class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didReceiveResponse:response cacheStoragePolicy:<span class="built_in">NSURLCacheStorageNotAllowed</span>];</div><div class="line">    </div><div class="line">    completionHandler(<span class="built_in">NSURLSessionResponseAllow</span>);</div><div class="line">&#125;</div><div class="line">-(<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask didReceiveData:(<span class="built_in">NSData</span> *)data &#123;</div><div class="line">    [<span class="keyword">self</span>.client URLProtocol:<span class="keyword">self</span> didLoadData:data];</div><div class="line">&#125;</div><div class="line">- (<span class="keyword">void</span>)URLSession:(<span class="built_in">NSURLSession</span> *)session dataTask:(<span class="built_in">NSURLSessionDataTask</span> *)dataTask willCacheResponse:(<span class="built_in">NSCachedURLResponse</span> *)proposedResponse completionHandler:(<span class="keyword">void</span> (^)(<span class="built_in">NSCachedURLResponse</span> *cachedResponse))completionHandler</div><div class="line">&#123;</div><div class="line">    completionHandler(proposedResponse);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul>
<li>防止死循环  <code>[NSURLProtocol setProperty:@(YES) forKey:protocolKey inRequest:request];</code></li>
<li>NSURLProtocol 可以拦截 NSURLConnection、NSURLSession、UIwebview 的请求，但是不能拦截WKwebview 和CFNetwork的请求</li>
<li>AFNetworking 3.0 以后版本拦截不到请求，session的创建方式不同，默认不起作用，<a href="https://xz410236056.github.io/2016/09/01/NSURLProtocol%20%E6%8B%A6%E6%88%AA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/" target="_blank" rel="external">解决方法</a></li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.codertian.com/2016/10/23/black-magic-NSURLProtocol/" target="_blank" rel="external">田腾飞的博客</a><br><a href="https://xz410236056.github.io/2016/09/01/NSURLProtocol%20%E6%8B%A6%E6%88%AA%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/" target="_blank" rel="external">幻想乡</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;实际应用：在公司的海外项目中，在App中嵌入YouTube网页，当进入一个视频详情
    
    </summary>
    
    
      <category term="NetWork" scheme="http://yoursite.com/tags/NetWork/"/>
    
      <category term="NSURLProtocol" scheme="http://yoursite.com/tags/NSURLProtocol/"/>
    
  </entry>
  
  <entry>
    <title>TVOS开发技巧</title>
    <link href="http://yoursite.com/2017/06/19/TVOS%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/06/19/TVOS开发技巧/</id>
    <published>2017-06-19T04:43:11.000Z</published>
    <updated>2017-07-02T03:39:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面的话"><a href="#写在前面的话" class="headerlink" title="写在前面的话"></a>写在前面的话</h1><blockquote>
<p>之前一直觉得Apple TV 是个神奇的东西，迷一样的事物。国内基本见不到它的影子，而公司要做一个Apple TV app，作为一名”资深”iOS开发者，怎么能不兴奋呢😝<br>在使用Apple TV之后，感觉真的比国内安卓系统的智能电视要惊艳很多，遥控器都那么与众不同！操作方便，也赏心悦目；缺点是不能看各个电视频道</p>
</blockquote>
<h1 id="前期调研"><a href="#前期调研" class="headerlink" title="前期调研"></a>前期调研</h1><ul>
<li>相关资料很少，国内基本没有啥资料，只能看英文资料啦！推荐一本书籍《tvOS Apprentice》入门</li>
<li>使用Swift进行开发，国外资料基本都用Swift写，赶紧上船…</li>
</ul>
<h1 id="讲点有趣的"><a href="#讲点有趣的" class="headerlink" title="讲点有趣的"></a>讲点有趣的</h1><h2 id="UIView的focus特效"><a href="#UIView的focus特效" class="headerlink" title="UIView的focus特效"></a>UIView的focus特效</h2><ul>
<li><p>在电视屏幕上你看到App里展示的界面，大部分都是UIImageView呈现的，图片比文字更能吸引眼球。<br><img src="https://ws4.sinaimg.cn/large/006tKfTcly1fh4tlr07wcg30hs0b4hdv.gif" alt="ImageView Focus"><br>看到没有，但你用手指在遥控器触摸区打转时，获得焦点的图片会被放大，随手指旋转并带有眩光的视觉！这样的效果，只需设置UIImageView的自带属性：<code>adjustsImageWhenAncestorFocused</code>即可，真棒！！！</p>
</li>
<li><p>UIView 有个属性<code>canBecomeFocused</code>可以设置是否能获得焦点状态，设置为<code>true</code>，然后重写<code>didUpdateFocus()</code>方法</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">didUpdateFocus</span><span class="params">(<span class="keyword">in</span> context: UIFocusUpdateContext, with coordinator: UIFocusAnimationCoordinator)</span></span> &#123;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> context.nextFocusedView == <span class="keyword">self</span> &#123; <span class="comment">// 获得焦点</span></div><div class="line">            <span class="keyword">self</span>.transform = <span class="type">CGAffineTransform</span>(scaleX: <span class="number">1.1</span>, y: <span class="number">1.1</span>)</div><div class="line">            <span class="keyword">self</span>.layer.shadowColor = <span class="type">UIColor</span>.black.alpha(<span class="number">0.36</span>).cgColor</div><div class="line">            <span class="keyword">self</span>.layer.shadowOffset = <span class="type">CGSize</span>(width: <span class="number">0</span>, height: <span class="number">30</span>)</div><div class="line">            <span class="comment">//设置阴影，模糊效果的半径</span></div><div class="line">            <span class="keyword">self</span>.layer.shadowRadius = <span class="number">50</span></div><div class="line">            <span class="keyword">self</span>.layer.shadowOpacity = <span class="number">1.0</span></div><div class="line">        &#125;<span class="keyword">else</span>&#123; <span class="comment">//失去焦点</span></div><div class="line">            <span class="keyword">self</span>.transform = <span class="type">CGAffineTransform</span>.identity</div><div class="line">            <span class="keyword">self</span>.layer.shadowOpacity = <span class="number">0.0</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>下面再看一个有意思的<br><img src="https://ws3.sinaimg.cn/large/006tKfTcly1fh5b45kp08g30hs0b4x6p.gif" alt="表情"></p>
<p>UIImageView的<code>animationImages</code>可以设置一组图片，然后让图片动起来~<br>可是当你把一组表情图片设置给<code>animationImages</code>，ImageView获得焦点时，表情并没有动啊！  解决方法：将UIImageView加到一个UIView上，当view获得焦点时，view调整<code>transform</code>的<code>scale</code>，并让imageView开始<code>startAnimating</code>；失去焦点时，将view的<code>transform</code>还原，imageView<code>stopAnimating</code>。</p>
<h1 id="如何控制焦点"><a href="#如何控制焦点" class="headerlink" title="如何控制焦点"></a>如何控制焦点</h1><h2 id="Focus-Engine（焦点引擎）"><a href="#Focus-Engine（焦点引擎）" class="headerlink" title="Focus Engine（焦点引擎）"></a>Focus Engine（焦点引擎）</h2><ul>
<li>我们可以将Focus视为聚光灯，将用户的注意力引导到屏幕上的特定元素。视图可以突出显示或聚焦，用户可以使用遥控器将焦点移动到应用的不同元素。</li>
<li>当用户在遥控器的触摸面上滑动时，焦点引擎将朝着移动焦点的下一个视图的方向移动。如果它“看到”一个，它将Focus放在那里，如果没有看到它，它不会移动Focus。</li>
</ul>
<p>例如：下面简单的3个按钮应用程序，当右上方的按钮处于焦点状态，用户向下滑动，想滑动到左下方按钮，因为焦点引擎看不到任何视图，所以Focus不会移动。<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fh5bsya529j31c00r0174.jpg" alt="Focus示意图"></p>
<p>这时候该 <strong>UIFocusGuide</strong> 登场了  </p>
<h2 id="UIFocusGuide"><a href="#UIFocusGuide" class="headerlink" title="UIFocusGuide"></a>UIFocusGuide</h2><p><strong>UIFocusGuide</strong> ：是不可见的布局指导，可帮助Focus Engine知道将Focus移动到哪里。<br>我们把FocusGuide放到右下方，效果就像下图<br><img src="https://ws1.sinaimg.cn/large/006tKfTcly1fh5c8d3gdij31c00r0nay.jpg" alt="FocusGuide"></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>首先，我们添加焦点指南的视图。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Create the Focus Guide and add it to the view</span></div><div class="line"><span class="keyword">var</span> focusGuide = <span class="type">UIFocusGuide</span>()</div><div class="line">view.addLayoutGuide(focusGuide)</div><div class="line"></div><div class="line"><span class="comment">// Anchor the Focus Guide     </span></div><div class="line">focusGuide.widthAnchor.constraintEqualToAnchor(topRightButton.widthAnchor).active = <span class="literal">true</span></div><div class="line">focusGuide.heightAnchor.constraintEqualToAnchor(bottomLeftButton.heightAnchor).active = <span class="literal">true</span></div><div class="line">focusGuide.topAnchor.constraintEqualToAnchor(bottomLeftButton.topAnchor).active = <span class="literal">true</span></div><div class="line">focusGuide.leftAnchor.constraintEqualToAnchor(topRightButton.leftAnchor).active = <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>然后，要使焦点指南直接聚焦到左下方的按钮，我们设置焦点指南的<code>preferredFocusView</code>属性; 这是“焦点指南”将引导焦点的view。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Set preferred focus</span></div><div class="line"> focusGuide.preferredFocusedView = bottomLeftButton</div></pre></td></tr></table></figure>
<h3 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h3><p>如果它们没有起作用，如何调试”焦点指南”呢？<br>苹果提供两种方式：</p>
<ol>
<li>Quick Look(快速查看)</li>
<li><code>_whyIsThisViewNotFocusable</code></li>
</ol>
<p><strong>快速查看</strong><br>Quick Look是一款用于调试Focus Engine和Focus Guide问题的可视化工具。<br>要使用它，你必须在方法中得到一个中断didUpdateFocusInContext(context, withAnimationCoordinator coordinator); 每次焦点被移动时都会被调用。然后，在Xcode左下角的Varibles视图中，突出显示context变量，然后单击底部的眼睛图标（或按空格键）。</p>
<p><strong>whyIsThisViewNotFocusable</strong><br>苹果还提供了（非常描述性地命名）LLDB命令，_whyIsThisViewNotFocusable称为另一个Focus调试工具。</p>
<p>要使用此命令，您需要在代码中的任何位置（或者甚至暂停它）中断中断，并_whyIsThisViewNotFocusable在LLDB命令行调试器中运行命令，如下所示：</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[yourView _whyIsThisViewNotFocusable]</div></pre></td></tr></table></figure>
<p>Swift命令是：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">po yourView.performSelector(<span class="type">Selector</span>(<span class="string">"_whyIsThisViewNotFocusable"</span>))</div></pre></td></tr></table></figure>
<p><strong>第三个方法Visual Focus Guides</strong><br><a href="https://github.com/davidengelhardt/VisualFocusGuides" target="_blank" rel="external">Github地址</a></p>
<h1 id="再吐槽一下"><a href="#再吐槽一下" class="headerlink" title="再吐槽一下"></a>再吐槽一下</h1><p>给图片加圆角   </p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.bgImageV.layer.masksToBounds = <span class="literal">true</span></div><div class="line">   <span class="keyword">self</span>.bgImageV.layer.cornerRadius = <span class="number">10</span></div></pre></td></tr></table></figure>
<p>TVOS上可没这么简单，这么做的后果是当图片在焦点状态时，图片放大的部分会被裁剪，这太坑了~😢</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Kingfisher库的生成圆角方法</span></div><div class="line"><span class="comment">///下载网络图片</span></div><div class="line"><span class="keyword">let</span> processor = <span class="type">RoundCornerImageProcessor</span>(cornerRadius: <span class="number">6</span>)</div><div class="line">   <span class="type">ImageView</span>.kf.setImage(with: model?.image, placeholder: <span class="literal">nil</span>, options: [.processor(processor)])</div><div class="line">   </div><div class="line">   <span class="comment">///本地图片</span></div><div class="line">   <span class="keyword">let</span> image = <span class="type">UIImage</span>.createImage(color: <span class="type">UIColor</span>(<span class="string">"#908F8F"</span>), cornerRadius: <span class="number">0</span>, size: <span class="type">CGSize</span>(width: <span class="number">10</span>, height: <span class="number">10</span>))</div><div class="line">   <span class="comment">//fit 一定要是UIImageView的size大小</span></div><div class="line">   <span class="type">ImageView</span>.image = image.kf.image(withRoundRadius: <span class="number">6</span>, fit: <span class="type">ImageView</span>.size)</div></pre></td></tr></table></figure>
<p>为啥在TVApp不能给UIImageView设置圆角呢？苹果怎么考虑的？可能是个bug！</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.viacom.tech/2016/07/07/tvosfocusguides/" target="_blank" rel="external">Debugging Focus in tvOS</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;写在前面的话&quot;&gt;&lt;a href=&quot;#写在前面的话&quot; class=&quot;headerlink&quot; title=&quot;写在前面的话&quot;&gt;&lt;/a&gt;写在前面的话&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;之前一直觉得Apple TV 是个神奇的东西，迷一样的事物。国内基本见不到它的影子
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="TVOS" scheme="http://yoursite.com/tags/TVOS/"/>
    
  </entry>
  
  <entry>
    <title>iOS应用内购买IAP</title>
    <link href="http://yoursite.com/2017/06/13/iOS%E5%BA%94%E7%94%A8%E5%86%85%E8%B4%AD%E4%B9%B0IAP/"/>
    <id>http://yoursite.com/2017/06/13/iOS应用内购买IAP/</id>
    <published>2017-06-13T01:51:30.000Z</published>
    <updated>2017-07-01T04:56:06.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="iOS应用内购买IAP"><a href="#iOS应用内购买IAP" class="headerlink" title="iOS应用内购买IAP"></a>iOS应用内购买IAP</h1><blockquote>
<p>最近苹果针对iOS应用软件开发者的指引政策进行了修改，，第一次明确指出用户支付小费或者打赏，必须通过苹果的支付渠道，也就是不能绕开苹果iOS管理机制。微信在iOS版本取消了打赏功能，知乎则是向苹果低了头…<br>苹果在相关文档中提到，如果开发者想在iOS软件提供下述功能（比如用户订阅、游戏内虚拟货币、获取高端会员内容、或者提供完整的功能版本等），则开发者必须使用软件内购买。</p>
</blockquote>
<p><em>本文主要以自动订阅类型产品为主，其他类型产品为辅</em></p>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p><code>In-App Purchase</code>， 简称IAP，允许在iOS app与macOS app中出售商品。</p>
<ul>
<li><strong>新建一个app，然后添加App 内购买项目，主要分四种内购买项目类型。</strong>  </li>
</ul>
<ol>
<li>消耗品（Consumable products）：会越用越少的，比如游戏内金币等。</li>
<li>不可消耗品（Non-consumable products）：比如游戏中跑车，简单来说就是一次购买，终身可用（用户可随时从App Store restore）</li>
<li>自动更新订阅品（Auto-renewable subscriptions）：和不可消耗品的不同点是有失效时间。比如一整年的付费周刊。在这种模式下，开发者定期投递内容，用户在订阅期内随时可以访问这些内容。订阅快要过期时，系统将自动更新订阅。</li>
<li>非自动更新订阅品（Non-renewable subscriptions）：一般使用场景是从用户从IAP购买后，购买信息存放在自己的开发者服务器上。失效日期/可用是由开发者服务器自行控制的，而非由App Store控制，这一点与自动更新订阅品有差异。</li>
</ol>
<ul>
<li><p><strong>添加APP内购买项目</strong><br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fgi5piu646j31kw0n6n2z.jpg" alt="内购项目"></p>
</li>
<li><p><strong>设置税务和银行卡信息</strong></p>
<p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fgi5x38ay6j30q505jwfb.jpg" alt="银行卡"></p>
</li>
<li><p><strong>添加沙盒测试账号</strong><br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fgi63t9r71j30rb07u3z8.jpg" alt="沙盒测试账号"></p>
</li>
</ul>
<h2 id="使用StoreKit-API"><a href="#使用StoreKit-API" class="headerlink" title="使用StoreKit API"></a>使用StoreKit API</h2><ol>
<li><p>获取产品列表，展现的产品可以后台配置(Consumable可消耗商品举例)</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - FETCH AVAILABLE IAP PRODUCTS</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">fetchAvailableProducts</span><span class="params">()</span></span>  &#123;</div><div class="line">       <span class="type">Toast</span>(text: <span class="string">"fetching available products"</span>).show()</div><div class="line">       <span class="comment">// Put here your IAP Products ID's</span></div><div class="line">       <span class="keyword">let</span> productIdentifiers = <span class="type">NSSet</span>(objects:</div><div class="line">           <span class="type">COINS_PRODUCT_ID</span>,<span class="type">PREMIUM_PRODUCT_ID</span></div><div class="line">       )</div><div class="line">       </div><div class="line">       productsRequest = <span class="type">SKProductsRequest</span>(productIdentifiers: productIdentifiers <span class="keyword">as</span>! <span class="type">Set</span>&lt;<span class="type">String</span>&gt;)</div><div class="line">       productsRequest.delegate = <span class="keyword">self</span></div><div class="line">       productsRequest.start()</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   <span class="comment">// MARK: - REQUEST IAP PRODUCTS</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">productsRequest</span> <span class="params">(<span class="number">_</span> request:SKProductsRequest, didReceive response:SKProductsResponse)</span></span> &#123;</div><div class="line">       <span class="keyword">if</span> (response.products.<span class="built_in">count</span> &gt; <span class="number">0</span>) &#123;</div><div class="line">           <span class="type">Toast</span>(text: <span class="string">"fetch \(response.products.count) product success"</span>).show()</div><div class="line">           </div><div class="line">           iapProducts = response.products</div><div class="line">           </div><div class="line">           <span class="comment">// 1st IAP Product (Consumable) ------------------------------------</span></div><div class="line">           <span class="keyword">let</span> firstProduct = response.products[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">SKProduct</span></div><div class="line">           </div><div class="line">           <span class="comment">// Get its price from iTunes Connect</span></div><div class="line">           <span class="keyword">let</span> numberFormatter = <span class="type">NumberFormatter</span>()</div><div class="line">           numberFormatter.formatterBehavior = .behavior10_4</div><div class="line">           numberFormatter.numberStyle = .currency</div><div class="line">           numberFormatter.locale = firstProduct.priceLocale</div><div class="line">           <span class="keyword">let</span> price1Str = numberFormatter.string(from: firstProduct.price)</div><div class="line">           </div><div class="line">           <span class="comment">// Show its description</span></div><div class="line">           consumableLabel.text = firstProduct.localizedDescription + <span class="string">"\nfor just \(price1Str!)"</span></div><div class="line">    	&#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>购买产品，首先检查设备是否支持内购买，然后将交易加入支付队列</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: - MAKE PURCHASE OF A PRODUCT</span></div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">canMakePurchases</span><span class="params">()</span></span> -&gt; <span class="type">Bool</span> &#123;  <span class="keyword">return</span> <span class="type">SKPaymentQueue</span>.canMakePayments()  &#125;</div><div class="line">   <span class="function"><span class="keyword">func</span> <span class="title">purchaseMyProduct</span><span class="params">(product: SKProduct)</span></span> &#123;</div><div class="line">       <span class="keyword">if</span> <span class="keyword">self</span>.canMakePurchases() &#123;</div><div class="line">           <span class="type">Toast</span>(text: <span class="string">"begin purchase for \(product.localizedTitle)"</span>).show()</div><div class="line">           </div><div class="line">           <span class="keyword">let</span> payment = <span class="type">SKPayment</span>(product: product)</div><div class="line">           <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().add(<span class="keyword">self</span>)</div><div class="line">           <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().add(payment)</div><div class="line">           </div><div class="line">           <span class="built_in">print</span>(<span class="string">"PRODUCT TO PURCHASE: \(product.productIdentifier)"</span>)</div><div class="line">           productID = product.productIdentifier</div><div class="line">           </div><div class="line">           </div><div class="line">           <span class="comment">// IAP Purchases dsabled on the Device</span></div><div class="line">       &#125; <span class="keyword">else</span> &#123;</div><div class="line">           <span class="type">UIAlertView</span>(title: <span class="string">"IAP Tutorial"</span>,</div><div class="line">                       message: <span class="string">"Purchases are disabled in your device!"</span>,</div><div class="line">                       delegate: <span class="literal">nil</span>, cancelButtonTitle: <span class="string">"OK"</span>).show()</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>处理支付结果</p>
</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK:- IAP PAYMENT QUEUE</span></div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">paymentQueue</span><span class="params">(<span class="number">_</span> queue: SKPaymentQueue, updatedTransactions transactions: [SKPaymentTransaction])</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> transaction:<span class="type">AnyObject</span> <span class="keyword">in</span> transactions &#123;</div><div class="line">            <span class="keyword">if</span> <span class="keyword">let</span> trans = transaction <span class="keyword">as</span>? <span class="type">SKPaymentTransaction</span> &#123;</div><div class="line">                <span class="keyword">let</span> msg = <span class="keyword">self</span>.descFromTransactionState(trans.transactionState);</div><div class="line">                <span class="keyword">if</span>(msg != <span class="literal">nil</span>)&#123;</div><div class="line">                    <span class="type">Toast</span>(text: msg).show()</div><div class="line">                &#125;</div><div class="line">                </div><div class="line">                <span class="keyword">switch</span> trans.transactionState &#123;</div><div class="line">                    </div><div class="line">                <span class="keyword">case</span> .purchased:</div><div class="line">                    <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().finishTransaction(transaction <span class="keyword">as</span>! <span class="type">SKPaymentTransaction</span>)</div><div class="line">                    </div><div class="line">                    <span class="keyword">guard</span> <span class="keyword">let</span> receiptUrl = <span class="type">Bundle</span>.main.appStoreReceiptURL <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>()</div><div class="line">                        <span class="keyword">return</span></div><div class="line">                    &#125;</div><div class="line">                    </div><div class="line">                    <span class="keyword">let</span> receipt = <span class="keyword">try</span>? <span class="type">Data</span>.<span class="keyword">init</span>(contentsOf: receiptUrl)</div><div class="line">                                   </div><div class="line">                    <span class="comment">//自动订阅类型需要验证receipt 发到 apple </span></div><div class="line">                    <span class="keyword">guard</span> <span class="keyword">let</span> receiptBase64String = receipt?.base64EncodedString() <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="keyword">return</span></div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">let</span> dict = [<span class="string">"receipt-data"</span>: receiptBase64String]</div><div class="line">                    <span class="keyword">let</span> url:<span class="type">URL</span>? = <span class="type">URL</span>(string:<span class="string">"https://sandbox.itunes.apple.com/verifyReceipt"</span>)</div><div class="line">                    <span class="keyword">var</span> request = <span class="type">URLRequest</span>.<span class="keyword">init</span>(url: url!)</div><div class="line">                    request.httpMethod = <span class="string">"POST"</span></div><div class="line">                    <span class="keyword">let</span> data = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.data(withJSONObject: dict, options: <span class="type">JSONSerialization</span>.<span class="type">WritingOptions</span>.prettyPrinted)</div><div class="line">                    request.httpBody = data</div><div class="line"></div><div class="line">                    <span class="type">URLSession</span>.shared.dataTask(with: request, completionHandler: &#123; (data, response, error) <span class="keyword">in</span></div><div class="line">                        <span class="keyword">if</span>(data != <span class="literal">nil</span>)&#123;</div><div class="line">                            <span class="keyword">let</span> <span class="type">JSONObj</span> = <span class="keyword">try</span>? <span class="type">JSONSerialization</span>.jsonObject(with: data!, options: .allowFragments)</div><div class="line">                            <span class="keyword">let</span> str = <span class="type">String</span>(data: data!, encoding: .utf8)</div><div class="line">                            <span class="built_in">print</span>(str!)</div><div class="line">                            <span class="built_in">print</span>(<span class="type">JSONObj</span>!)</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;).resume()</div><div class="line">                                                            </div><div class="line">                    <span class="keyword">break</span></div><div class="line">                    </div><div class="line">                <span class="keyword">case</span> .failed:</div><div class="line">                    <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().finishTransaction(transaction <span class="keyword">as</span>! <span class="type">SKPaymentTransaction</span>)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">case</span> .restored:</div><div class="line">                    <span class="type">SKPaymentQueue</span>.<span class="keyword">default</span>().finishTransaction(transaction <span class="keyword">as</span>! <span class="type">SKPaymentTransaction</span>)</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                    </div><div class="line">                <span class="keyword">default</span>: <span class="keyword">break</span></div><div class="line">                &#125;&#125;&#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="使用SwiftyStoreKit库简化调用API"><a href="#使用SwiftyStoreKit库简化调用API" class="headerlink" title="使用SwiftyStoreKit库简化调用API"></a>使用<a href="https://github.com/bizz84/SwiftyStoreKit" target="_blank" rel="external">SwiftyStoreKit</a>库简化调用API</h2><ul>
<li>SwiftyStoreKit对StoreKit的api进行封装，调用起来更加方便。具体api请参考<a href="https://github.com/bizz84/SwiftyStoreKit" target="_blank" rel="external">SwiftyStoreKit Github</a></li>
<li>需要注意的购买商品时api 区分原子性和非原子性；原子性是购买成功后，购买的内容能立即传递给用户界面，而非原子性是指购买的内容需要从服务器下载，需要下载完毕，才调用完成交易的api来结束交易</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="type">SwiftyStoreKit</span>.purchaseProduct(<span class="string">"com.musevisions.SwiftyStoreKit.Purchase1"</span>, quantity: <span class="number">1</span>, atomically: <span class="literal">false</span>) &#123; result <span class="keyword">in</span></div><div class="line">    <span class="keyword">switch</span> result &#123;</div><div class="line">    <span class="keyword">case</span> .success(<span class="keyword">let</span> product):</div><div class="line">        <span class="comment">// fetch content from your server, then:</span></div><div class="line">        <span class="keyword">if</span> product.needsFinishTransaction &#123;</div><div class="line">            <span class="type">SwiftyStoreKit</span>.finishTransaction(product.transaction)</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">print</span>(<span class="string">"Purchase Success: \(product.productId)"</span>)</div><div class="line">    <span class="keyword">case</span> .error(<span class="keyword">let</span> error):</div><div class="line">        <span class="keyword">switch</span> error.code &#123;</div><div class="line">        <span class="keyword">case</span> .unknown: <span class="built_in">print</span>(<span class="string">"Unknown error. Please contact support"</span>)</div><div class="line">        <span class="keyword">case</span> .clientInvalid: <span class="built_in">print</span>(<span class="string">"Not allowed to make the payment"</span>)</div><div class="line">        <span class="keyword">case</span> .paymentCancelled: <span class="keyword">break</span></div><div class="line">        <span class="keyword">case</span> .paymentInvalid: <span class="built_in">print</span>(<span class="string">"The purchase identifier was invalid"</span>)</div><div class="line">        <span class="keyword">case</span> .paymentNotAllowed: <span class="built_in">print</span>(<span class="string">"The device is not allowed to make the payment"</span>)</div><div class="line">        <span class="keyword">case</span> .storeProductNotAvailable: <span class="built_in">print</span>(<span class="string">"The product is not available in the current storefront"</span>)</div><div class="line">        <span class="keyword">case</span> .cloudServicePermissionDenied: <span class="built_in">print</span>(<span class="string">"Access to cloud service information is not allowed"</span>)</div><div class="line">        <span class="keyword">case</span> .cloudServiceNetworkConnectionFailed: <span class="built_in">print</span>(<span class="string">"Could not connect to the network"</span>)</div><div class="line">        <span class="keyword">case</span> .cloudServiceRevoked: <span class="built_in">print</span>(<span class="string">"User has revoked permission to use this cloud service"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="自动订阅类型总结"><a href="#自动订阅类型总结" class="headerlink" title="自动订阅类型总结"></a>自动订阅类型总结</h2><ol>
<li>注册在AppDelegate中<code>didFinishLaunchingWithOptions</code>中，注册交易观察者，这样app就可以收到支付队列的通知（自动续订时会被调用）</li>
<li>沙盒测试周期会被加速，订阅周期为1周，在沙盒环境下只需3分钟，1个月只需5分钟…苹果考虑的挺周到的</li>
<li>一个沙盒测试账号一天只能被更新订阅<code>5</code>次，测试自动订阅时尤其注意，可以使用多个测试账号（当时我以为没能自动订阅呢）</li>
<li>客户端先将receipt发给服务端，服务端去验证receipt 有时返回 <code>210007</code> 状态码，意味着这个receipt是测试环境的，但发送到了正式环境<a href="https://buy.itunes.apple.com/verifyReceip" target="_blank" rel="external">https://buy.itunes.apple.com/verifyReceip</a>。而且审核时，苹果人员也是用沙盒环境测试，如何切换正式和测试环境呢？<strong>解决方案：</strong>服务端先走正式环境，如果返回21007就再走沙盒环境去验证。</li>
<li>关于用户退款，需要服务端定期去向App Store去校验receipt，在返回来的数据中检查是否有 <code>cancellation_date</code> 字段，如果有值，则购买不成立。</li>
</ol>
<hr>
<p><strong>欢迎指正😝</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://code.tutsplus.com/tutorials/in-app-purchase-tutorial-with-swift-3-ios-sdk--cms-27595" target="_blank" rel="external">In-App Purchases in iOS With Swift 3</a><br><a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/StoreKitGuide/Introduction.html#//apple_ref/doc/uid/TP40008267-CH1-SW1" target="_blank" rel="external">苹果文档 About In-App Purchase</a><br><a href="https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ReceiptFields.html#//apple_ref/doc/uid/TP40010573-CH106-SW1" target="_blank" rel="external">苹果文档 验证Receipt</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;iOS应用内购买IAP&quot;&gt;&lt;a href=&quot;#iOS应用内购买IAP&quot; class=&quot;headerlink&quot; title=&quot;iOS应用内购买IAP&quot;&gt;&lt;/a&gt;iOS应用内购买IAP&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;最近苹果针对iOS应用软件开发者的指引政策
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="IAP" scheme="http://yoursite.com/tags/IAP/"/>
    
  </entry>
  
  <entry>
    <title>Value and Reference Type</title>
    <link href="http://yoursite.com/2017/06/03/Value-and-Reference-Type/"/>
    <id>http://yoursite.com/2017/06/03/Value-and-Reference-Type/</id>
    <published>2017-06-03T13:17:03.000Z</published>
    <updated>2017-06-04T06:10:35.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift中值类型和引用类型"><a href="#Swift中值类型和引用类型" class="headerlink" title="Swift中值类型和引用类型"></a>Swift中值类型和引用类型</h1><p><em>本文主要介绍值类型、以及使用Struct作为数据模型的注意事项</em></p>
<h2 id="值类型（value-type）"><a href="#值类型（value-type）" class="headerlink" title="值类型（value type）"></a>值类型（value type）</h2><p><strong>值类型：</strong>每次分配给变量/常量或者作为参数传递到函数时，都会重新创建（复制）一个新的实例。</p>
<p>Swift 中的所有的内建类型都是值类型，不仅包括了传统意义像 Int，Double这些，甚至连 String，Array 以及 Dictionary 都是值类型的(与OC不同), swift中所有的Struct 和 enum 都是值类型，值类型每次初始化以后，将它分配或者传递时，实际上是分配或传递了它的一个拷贝。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> x : <span class="type">Int</span></div><div class="line">    <span class="keyword">var</span> y : <span class="type">Int</span></div><div class="line">    <span class="keyword">init</span>(x:<span class="type">Int</span>, y:<span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.x = x</div><div class="line">        <span class="keyword">self</span>.y = y</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> aPoint = <span class="type">Point</span>(x: <span class="number">10</span>, y: <span class="number">10</span>)</div><div class="line"> <span class="keyword">var</span> bPoint = aPoint</div><div class="line"> bPoint.x = <span class="number">5</span></div><div class="line"> <span class="built_in">print</span>(aPoint)</div><div class="line"> <span class="built_in">print</span>(bPoint)</div></pre></td></tr></table></figure>
<p><strong>打印结果</strong></p>
<p>Point(x: 10, y: 10)</p>
<p>Point(x: 5, y: 10)</p>
<p><strong>总结</strong>：</p>
<ol>
<li>赋值给新变量，会产生一个单独的、没有数据共享的新实例.</li>
<li>值类型在复制时，会将存储在其中的值类型一并进行复制，而对于其中的引用类型的话，则只复制一份引用。</li>
<li>复制时机，是在值类型中的内容发生改变时！值类型每次复制会增加额外开销，Swift将这种开销控制在最小的范围内，在没有必要复制时，复制是不会发生的。~(≧▽≦)/~</li>
</ol>
<p><strong>线程安全：</strong><br>    在Swift中，Array、String、Dictionary都是值类型。它们的使用方式类似C语言中得int，每一个实例都有一份数据。你不需要进行显示的复制操作去防止数据在你不知情的情况下被修改。更重要的是，你可以跨线程进行传参而不需要考虑同步的问题，因为传递值类型很安全。（<a href="https://developer.apple.com/swift/blog/?id=10" target="_blank" rel="external">Swift官方博客</a>）</p>
<h2 id="引用类型（Reference-Types）"><a href="#引用类型（Reference-Types）" class="headerlink" title="引用类型（Reference Types）"></a>引用类型（Reference Types）</h2><p><strong>引用类型</strong>：引用类型初始化后，无论是分配给变量还是常量，或是通过参数传递给函数，都将是同一个实例对象。<br>NSObject再熟悉不过了，当在分配或传递是都是引用，都指向那个原始对象。不再多说了~</p>
<h2 id="Struct数据模型"><a href="#Struct数据模型" class="headerlink" title="Struct数据模型"></a>Struct数据模型</h2><p><strong>处理数据结构时有时会用Struct进行处理，使用 Struct 来代替 Class 作为数据模型有很多好处。值类型是非常有优势的：</strong></p>
<ul>
<li>安全性 ：因为 Struct 是用值类型传递的，它们没有引用计数。</li>
<li>内存：由于他们没有引用数，他们不会因为循环引用导致内存泄漏。</li>
<li>速度：值类型通常来说是以栈的形式分配的，而不是用堆。因此他们比 Class 要快很多，真的很多！在 <a href="https://stackoverflow.com/questions/24232799/why-choose-struct-over-class/24232845" target="_blank" rel="external">StackOverflow</a> 给 Struct 和 Class 进行相同操作的表现做了基准测试，Struct 比 Class 要快九百倍。</li>
<li>拷贝：在 Objective-C 里拷贝一个对象,你必须选用正确的拷贝类型（深拷贝、浅拷贝），这是非常烦人的，值类型的拷贝则非常轻松！</li>
<li>线程安全：值类型是自动线程安全的。无论你从哪个线程去访问你的 Struct ，都非常简单。</li>
</ul>
<p><strong>Struct的缺点：</strong></p>
<ul>
<li>OC无法调用Swift的Struct，当你的项目的代码是 Swift 和 Objective-C 混合开发时，你会发现在 Objective-C 的代码里无法调用 Swift 的 Struct。因为要在 Objective-C 里调用 Swift 代码的话，对象需要继承于 NSObject。</li>
<li>不能继承，继承是面向对象编程的四大特性之一，没有继承就不能抽象一个统一模型</li>
<li>Struct 不能被序列化成 NSData 对象。某些时候会把数据存在 NSUserDefaults 里，而Struct 转化成NSData，技术可行但坑多</li>
</ul>
<p>参考：</p>
<p><a href="http://swifter.tips/value-reference/" target="_blank" rel="external">王巍Swift Tips</a></p>
<p><a href="http://swift.gg/2016/07/22/swift-caveats-for-structs-as-data-models/" target="_blank" rel="external">SwiftGG</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift中值类型和引用类型&quot;&gt;&lt;a href=&quot;#Swift中值类型和引用类型&quot; class=&quot;headerlink&quot; title=&quot;Swift中值类型和引用类型&quot;&gt;&lt;/a&gt;Swift中值类型和引用类型&lt;/h1&gt;&lt;p&gt;&lt;em&gt;本文主要介绍值类型、以及使用Stru
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>My Heart Will Go On</title>
    <link href="http://yoursite.com/2017/06/03/Willishine%E7%9A%84%E4%B8%96%E7%95%8C/"/>
    <id>http://yoursite.com/2017/06/03/Willishine的世界/</id>
    <published>2017-06-03T13:15:20.000Z</published>
    <updated>2017-07-05T00:50:07.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>如果想要成功，那就要努力；光努力还不够，还要坚持，如果坚持不了，那就不要抱怨…  </p>
</li>
<li><p>自己有多想成功？当你想成功的欲望强烈的像想要呼吸一样，成功才更有可能…</p>
</li>
<li><p>“人生没有彩排，每一天都是现场直播”。偶尔会想，如果人生真如一场电子游戏，玩坏了可以选择重来，生活会变成什么样子？正因为时光流逝一去不复返，每一天都不可追回，所以更要珍惜每一寸光阴，孝敬父母、疼爱孩子、体贴爱人、善待朋友！</p>
</li>
<li><p>我想要纯粹的生活<br>想要奋斗的喜悦<br>想要健康的体魄<br>想要一个有趣的灵魂<br>二十六的我，仍然渴望出发…</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;如果想要成功，那就要努力；光努力还不够，还要坚持，如果坚持不了，那就不要抱怨…  &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自己有多想成功？当你想成功的欲望强烈的像想要呼吸一样，成功才更有可能…&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;“人生没有彩排，每一天都是现场直
    
    </summary>
    
    
      <category term="慢时光" scheme="http://yoursite.com/tags/%E6%85%A2%E6%97%B6%E5%85%89/"/>
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="梦想" scheme="http://yoursite.com/tags/%E6%A2%A6%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>OC和JavaScript交互</title>
    <link href="http://yoursite.com/2017/05/23/OC%E5%92%8CJavaScript%E4%BA%A4%E4%BA%92/"/>
    <id>http://yoursite.com/2017/05/23/OC和JavaScript交互/</id>
    <published>2017-05-23T15:37:05.000Z</published>
    <updated>2017-07-03T16:50:56.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UIWebView与JavaScript交互"><a href="#UIWebView与JavaScript交互" class="headerlink" title="UIWebView与JavaScript交互"></a>UIWebView与JavaScript交互</h1><h2 id="基本的概念"><a href="#基本的概念" class="headerlink" title="基本的概念"></a>基本的概念</h2><ul>
<li><code>JavaScriptCore</code>是封装了JavaScript和Objective-C桥接的Objective-C API，只要用很少的代码，就可以做到JavaScript调用Objective-C，或者Objective-C调用JavaScript。</li>
<li><code>JSValue</code>: 代表一个JavaScript实体，一个JSValue可以表示很多JavaScript原始类型例如boolean, integers, doubles，甚至包括对象和函数。</li>
<li><code>JSContext</code>: 代表JavaScript的运行环境，你需要用JSContext来执行JavaScript代码。所有的JSValue都是捆绑在一个JSContext上的.</li>
<li><code>JSExport</code>: 这是一个协议，可以用这个协议来将原生对象导出给JavaScript，这样原生对象的属性或方法就成为了JavaScript的属性或方法，非常神奇。</li>
</ul>
<h2 id="OC调用JS的方法"><a href="#OC调用JS的方法" class="headerlink" title="OC调用JS的方法"></a>OC调用JS的方法</h2><p>采用stringByEvaluatingJavaScriptFromString写入JS代码，调用JS的方法<br>采用系统框架<javascriptcore javascriptcore.h="">的JSContext +evaluateScript调用JS代码</javascriptcore></p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 1.UIWebView执行JS代码</span></div><div class="line">[<span class="keyword">self</span>.webView stringByEvaluatingJavaScriptFromString:<span class="string">@"showName('Willi')"</span>];</div><div class="line"><span class="comment">// 2.JavaScriptCore执行JS</span></div><div class="line">JSContext *context = [[JSContext alloc] init];</div><div class="line"><span class="built_in">NSString</span> *jsCode = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"alert(\"我是OC里面的js方法\")"</span>];</div><div class="line">[context evaluateScript:jsCode];</div></pre></td></tr></table></figure>
<h2 id="JS调用OC的方法"><a href="#JS调用OC的方法" class="headerlink" title="JS调用OC的方法"></a>JS调用OC的方法</h2><ol>
<li>采用传统的方法，加载WebView的时候截取URL的方式</li>
<li>利用苹果系统框架<javascriptcore javascriptcore.h="">的JSContext的block方式 或者 JSExport协议方式</javascriptcore></li>
</ol>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//注册printAandB方法</span></div><div class="line"> context[<span class="string">@"printAandB"</span>] = ^(<span class="built_in">NSString</span> *A ,<span class="built_in">NSString</span> *B) &#123;</div><div class="line">     <span class="built_in">NSLog</span>(<span class="string">@"%@,%@"</span>,A,B);</div><div class="line"> &#125;;</div><div class="line"> </div><div class="line"><span class="comment">//自定义协议，并且协议遵守&lt;JSExport&gt;协议</span></div><div class="line"><span class="class"><span class="keyword">@protocol</span> <span class="title">WuKongJSExport</span> &lt;<span class="title">JSExport</span>&gt;</span></div><div class="line">JSExportAs(Invoke, - (<span class="keyword">void</span>)invokeKey:(<span class="built_in">NSString</span> *)key value:(<span class="built_in">NSString</span> *)value);</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h1 id="WKWebView与JavaScript的交互"><a href="#WKWebView与JavaScript的交互" class="headerlink" title="WKWebView与JavaScript的交互"></a>WKWebView与JavaScript的交互</h1><h2 id="WKWebView"><a href="#WKWebView" class="headerlink" title="WKWebView"></a>WKWebView</h2><p><strong>WKWebView</strong>是苹果在iOS 8中引入的新组件，目的是给出一个新的高性能的WebView解决方案，摆脱过去 UIWebView的老、旧、笨重，特别是内存占用量巨大的问题。</p>
<h2 id="OC调用JS的方法-1"><a href="#OC调用JS的方法-1" class="headerlink" title="OC调用JS的方法"></a>OC调用JS的方法</h2><ul>
<li>原生调用JavaScript的代码需要在页面加载完成之后，就是在 - webView:didFinishNavigation:代理方法里面</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[webView evaluateJavaScript:<span class="string">@"showAlert('奏是一个弹框')"</span> completionHandler:^(<span class="keyword">id</span> item, <span class="built_in">NSError</span> * _Nullable error) &#123;</div><div class="line">        <span class="comment">// Block中处理是否通过了或者执行JS错误的代码</span></div><div class="line"> &#125;];</div></pre></td></tr></table></figure>
<h2 id="JS调用OC的方法-1"><a href="#JS调用OC的方法-1" class="headerlink" title="JS调用OC的方法"></a>JS调用OC的方法</h2><ul>
<li><p>JavaScript的配置<br>JavaScript调用Native的方法就需要前端和Native的小伙伴们配合了，需要前端的小伙伴在JS的方法中调用：<br><code>window.webkit.messageHandlers.NativeMethod.postMessage(&quot;就是一个消息啊&quot;);</code></p>
</li>
<li><p>Native App的代码配置</p>
</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">// 创建配置</span></div><div class="line"> <span class="built_in">WKWebViewConfiguration</span> *config = [[<span class="built_in">WKWebViewConfiguration</span> alloc] init];</div><div class="line"> <span class="comment">// 创建UserContentController（提供JavaScript向webView发送消息的方法）</span></div><div class="line"> <span class="built_in">WKUserContentController</span>* userContent = [[<span class="built_in">WKUserContentController</span> alloc] init];</div><div class="line"> <span class="comment">// 添加消息处理，注意：self指代的对象需要遵守WKScriptMessageHandler协议，结束时需要移除</span></div><div class="line">[userContent addScriptMessageHandler:<span class="keyword">self</span> name:<span class="string">@"NativeMethod"</span>];</div><div class="line"> <span class="comment">// 将UserConttentController设置到配置文件</span></div><div class="line"> config.userContentController = userContent;</div><div class="line"> <span class="comment">// 高端的自定义配置创建WKWebView</span></div><div class="line"> <span class="built_in">WKWebView</span> *webView = [[<span class="built_in">WKWebView</span> alloc] initWithFrame:[<span class="built_in">UIScreen</span> mainScreen].bounds configuration:config];</div><div class="line"> <span class="comment">// 设置访问的URL</span></div><div class="line"> <span class="built_in">NSURL</span> *url = [<span class="built_in">NSURL</span> URLWithString:<span class="string">@"http://www.jianshu.com"</span>];</div><div class="line"> <span class="comment">// 根据URL创建请求</span></div><div class="line"> <span class="built_in">NSURLRequest</span> *request = [<span class="built_in">NSURLRequest</span> requestWithURL:url];</div><div class="line"> <span class="comment">// WKWebView加载请求</span></div><div class="line"> [webView loadRequest:request];</div><div class="line"> <span class="comment">// 将WKWebView添加到视图</span></div><div class="line"> [<span class="keyword">self</span>.view addSubview:webView];</div></pre></td></tr></table></figure>
<p>可以看到，添加消息处理的handler的name，就是JavaScript中调用时候的<code>NativeMethod</code>，这两个要保持一致。请把URL换成你自己的。<br>配置当前ViewController为MessageHandler，需要服从<code>WKScriptMessageHandler</code>协议，如果出现警告⚠️，请检查是否服从了这个协议。<br><strong>注意！注意！注意：</strong>上面将当前ViewController设置为MessageHandler之后需要在当前ViewController销毁前将其移除，否则会造成内存泄漏。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[webView.configuration.userContentController removeScriptMessageHandlerForName:<span class="string">@"NativeMethod"</span>];</div></pre></td></tr></table></figure>
<p>现在万事俱备，只欠东风了。可以看到WKScriptMessageHandler的协议里面只有一个方法，就是：<code>- userContentController:didReceiveScriptMessage:</code>  </p>
<p>相信聪明的你已经猜到了。是的，就是在这个代理方法里面操作：如果JavaScript执行已经写好的：window.webkit.messageHandlers.NativeMethod.postMessage(“就是一个消息啊”);这行代码，这个代理方法就会走，并且会有个WKScriptMessage的对象，这个WKScriptMessage对象有个name属性，拿到之后你会发现，就是我们注册的NativeMethod这个字符串，这时候你就可以手动调用Native的方法了。如果有多个方法需要调用的话怎么办，看到JavaScript中postMessage()方法有一个参数了没有，可以根据这里的参数来区分调用原生App的哪个方法。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)userContentController:(<span class="built_in">WKUserContentController</span> *)userContentController didReceiveScriptMessage:(<span class="built_in">WKScriptMessage</span> *)message &#123;</div><div class="line">        <span class="comment">// 判断是否是调用原生的</span></div><div class="line">        <span class="keyword">if</span> ([<span class="string">@"NativeMethod"</span> isEqualToString:message.name]) &#123;</div><div class="line">            <span class="comment">// 判断message的内容，然后做相应的操作</span></div><div class="line">            <span class="keyword">if</span> ([<span class="string">@"close"</span> isEqualToString:message.body]) &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h1 id="网页支持滑动返回"><a href="#网页支持滑动返回" class="headerlink" title="网页支持滑动返回"></a>网页支持滑动返回</h1><p>  WKWebView比UIWebView有很多优势，在WKWebView中通过设置一个属性 <code>allowsBackForwardNavigationGestures</code> 就可以实现滑动返回，而UIWebView需要写很多代码来达到滑动返回效果。</p>
<p>项目最低支持iOS7，所以只能使用UIKit中的UIWebView，而新的WKWebView是支持iOS8+</p>
<ul>
<li>WKWebView的内存开销要比UIWebView小很多</li>
<li>拥有高达60FPS滚动刷新率及内置手势</li>
<li>支持了更多的HTML5特性</li>
<li>html页面和WKWebView交互更方便</li>
<li>Safari相同的<code>JavaScript</code>引擎</li>
<li>提供常用的属性，如加载网页进度的属性estimatedProgress</li>
</ul>
<p><strong>实现思路：</strong>在UIWebView的Delegate的shouldStart代理方法中，把当前页面截一张图，把这张截图和对应的Url保存到一个数组中，在WebView上加一个UIPanGestureRecognizer拖拽手势，在手势代理方法中监听状态的变化，当手指滑动时，会把当前的截图和上一页截图，根据手势的移动的位置，做随手指移动的动画。然后重新请求上一个网页<br>测试过程中发现，有时滑动好使有时不好使，最后了解到这个<code>Pan</code>手势和UIScrollview的<code>Pan</code>手势会冲突</p>
<ol>
<li><p><code>[webpageView.scrollView.panGestureRecognizer requireGestureRecognizerToFail:_swipePanGesture];</code> 设置先识别滑动返回,在识别滚动的手势，偶尔会造成某些网站网页，不能滚动。</p>
</li>
<li><p>设置手势代理方法 <code>- (BOOL)gestureRecognizer:(UIGestureRecognizer *)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer *)otherGestureRecognizer</code> 返回YES,允许手势能同时识别。完美解决手势冲突</p>
</li>
</ol>
<hr>
<p>欢迎指正😝</p>
<h1 id="资料"><a href="#资料" class="headerlink" title="资料"></a>资料</h1><p><a href="http://www.jianshu.com/p/403853b63537" target="_blank" rel="external">WKWebView使用</a><br><a href="http://nshipster.cn/wkwebkit/" target="_blank" rel="external">WKWeb​View(AFN作者)</a><br><a href="https://lvwenhan.com/ios/460.html" target="_blank" rel="external">自己动手打造基于 WKWebView 的混合开发框架</a>收藏一下</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UIWebView与JavaScript交互&quot;&gt;&lt;a href=&quot;#UIWebView与JavaScript交互&quot; class=&quot;headerlink&quot; title=&quot;UIWebView与JavaScript交互&quot;&gt;&lt;/a&gt;UIWebView与JavaScript
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Wireshark抓包</title>
    <link href="http://yoursite.com/2017/04/23/Wireshark%E6%8A%93%E5%8C%85/"/>
    <id>http://yoursite.com/2017/04/23/Wireshark抓包/</id>
    <published>2017-04-23T00:57:31.000Z</published>
    <updated>2017-07-05T16:56:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>网络抓包是个基础技能，对于网络协议的掌握有一定的要求。iOS上实现网络抓包可以用Charles（针对http和https），tcpdump（快速分析网络包），和Wireshare。和tcpdump相比，Wireshark提供丰富的GUI交互，而且能分析所有的网络协议。</p>
<ol>
<li>首先安装软件 <a href="https://www.wireshark.org/download.html" target="_blank" rel="external">官网下载</a>，目前最新版本v2.2.7</li>
</ol>
<p>打开主界面<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fh96jrkh8tj31kw180tix.jpg" alt="Wireshark主界面"><br>Wireshark在第一个界面就把当前系统所包含的网卡列出来了，直接点击任何一项就可以开始监听通过该网卡的所有网络流量。   </p>
<h1 id="RVI接口创建和管理"><a href="#RVI接口创建和管理" class="headerlink" title="RVI接口创建和管理"></a>RVI接口创建和管理</h1><p>当我们把iPhone通过usb连接macbook时，Wireshark并不能直接监听通过iPhone的网络流量，需要通过一个系统程序在我们的Mac系统上，建立一个映射到iPhone的虚拟网卡  </p>
<ol>
<li>通过数据线连接好iOS设备，拿到设备的UDID（Xcode或iTunes都行）</li>
<li>terminal输入命令，格式是<code>rvictl -s 设备UDID</code> </li>
</ol>
<p>执行命令之后Wireshark能立即识别新增加的rvi0网卡，也就是上图中高亮的部分，双击rvi0这一项，Wireshare即进入如下界面开始监听iPhone设备上的所有流量。</p>
<ul>
<li>Android手机，可以下载个<code>PacketCaptrue</code>软件，用于抓包</li>
</ul>
<p>如果出现下图错误，请用在终端用 <code>sudo wireshark</code> 命令启动<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fh9cvfmggej30es08lmy7.jpg" alt="error"></p>
<h1 id="网络包结构"><a href="#网络包结构" class="headerlink" title="网络包结构"></a>网络包结构</h1><p>经典的TCP/IP五层结构:</p>
<ul>
<li>应用层</li>
<li>传输层  </li>
<li>网络层</li>
<li>数据链路层</li>
<li>物理层</li>
</ul>
<p>应用层是最内层的payload，除了应用层这一层之外，其他层都是用自己这一层的协议header+所包含那一层的payload。可以用如下公式表示：<br>TCP Layer = TCP Header + Application Payload<br>IP Layer = IP Header + TCP Payload<br>…</p>
<h1 id="使用Filter过滤包"><a href="#使用Filter过滤包" class="headerlink" title="使用Filter过滤包"></a>使用Filter过滤包</h1><p>使用Wireshark和使用Charles最大的区别在于，Charles只捕获HTTP流量，而Wireshark捕捉的是经过目标网卡所有的流量，流量包可以在几秒内膨胀到难以阅读的数量，所以此时我们需要使用Filter来做包的过滤，Filter规则定的越细，剔除掉的干扰信息就越多，分析起来就越快。</p>
<p>Wireshark的Filter分为两种，一种为Capture Filter，另一种是Display Filter。 </p>
<ul>
<li><p>Capture Filter出现在初始界面，在网卡列表的上方有个输入框，允许我们输入capture filter，一旦输入了特定的capture规则，Wireshark就只捕获符合该规则的流量包了。</p>
</li>
<li><p>Display Filter出现在流量监控界面，在工具栏的下方有个输入框，允许我们输入display filter，display filter只是从界面上过滤掉不符合规则的包，Wireshark实际上还是监听了这些包，一旦去掉display filter，所有的包又会出现在同一界面。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fh9grjnf2wj30um0bcdio.jpg" alt="Display Filter"></p>
</li>
</ul>
<p>语法规则可以查看<a href="https://www.wireshark.org/docs/wsug_html_chunked/ChWorkBuildDisplayFilterSection.html" target="_blank" rel="external">Wireshark官方文档</a></p>
<h1 id="流量跟踪"><a href="#流量跟踪" class="headerlink" title="流量跟踪"></a>流量跟踪</h1><p>Wireshark默认情况下将不同网络连接的流量都混在一起展示，即使给不同协议的包上色之后，要单独查看某个特定连接的流量依然不怎么方便，我们可以通过Wireshark提供的两种方式来实现这个目标。</p>
<h2 id="Follow-Stream"><a href="#Follow-Stream" class="headerlink" title="Follow Stream"></a>Follow Stream</h2><p>当我们选中某个包之后，右键弹出的菜单里，有个选项允许我们将当前包所属于的完整流量单独列出来，如<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fh9ha85spnj31bc0u24da.jpg" alt="TCP追踪流"></p>
<h2 id="Flow-Graph"><a href="#Flow-Graph" class="headerlink" title="Flow Graph"></a>Flow Graph</h2><p>Flow Graph可以通过菜单Statistics-&gt;Flow Graph来生成，这样我们可以得到另一种形式的流量呈现</p>
<p>和Follow Stream不同的是我们获取到的是完整的流量，iPhone手机IP地址发出的流向多个服务器的网络流量，包括DNS解析和SSL安全握手等。当然我们也可以在上图中下方的操作区域做进一步的过滤，可以使用Display Filter做进一步的流量定位。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;网络抓包是个基础技能，对于网络协议的掌握有一定的要求。iOS上实现网络抓包可以用Charles（针对http和https），tcpdump（
    
    </summary>
    
    
      <category term="Wireshark" scheme="http://yoursite.com/tags/Wireshark/"/>
    
      <category term="抓包" scheme="http://yoursite.com/tags/%E6%8A%93%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Swift闭包</title>
    <link href="http://yoursite.com/2017/03/05/Swift%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2017/03/05/Swift闭包/</id>
    <published>2017-03-05T00:06:13.000Z</published>
    <updated>2017-07-05T00:45:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="闭包概念"><a href="#闭包概念" class="headerlink" title="闭包概念"></a>闭包概念</h1><p><strong>闭包</strong>是可以在你的代码中被传递和引用的功能性独立模块。Swift 中的闭包和 C 以及 Objective-C 中的 blocks 很像，还有其他语言中的匿名函数也类似。<br>在Swift中，提供三类闭包：</p>
<ul>
<li>全局函数是一个有名字但不会捕获任何值的闭包。</li>
<li>嵌套（内嵌）函数是一个有名字并可以捕获到其封闭函数域内的值的闭包。</li>
<li>闭包表达式是一个利用轻量级语法所写的，可以捕获其上下文中变量或常量值的匿名闭包。 </li>
</ul>
<h1 id="闭包表达式"><a href="#闭包表达式" class="headerlink" title="闭包表达式"></a>闭包表达式</h1><p>闭包表达式语法可以使用常量、变量和inout类型作为参数，不提供默认值。 也可以在参数列表的最后使用可变参数。 元组也可以作为参数和返回值。</p>
<p>闭包表达式语法的一般形式：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123; (parameters) -&gt; (<span class="keyword">return</span> type) <span class="keyword">in</span></div><div class="line">    statements</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<ul>
<li>关键字 in 来区分闭包的头和闭包函数体。</li>
</ul>
<p>Swift 的标准库提供了一个叫做 sorted(by:) 的方法，会根据你提供的排序闭包将已知类型的数组的值进行排序。使用sorted方法对闭包简化<br>例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">let names = ["Chris","Ewa","Barry","Daniella”]`</div><div class="line">// 普通函数</div><div class="line">func backward(_ s1: String, _ s2: String) -&gt; Bool &#123;</div><div class="line">    return s1 &gt; s2</div><div class="line">&#125;</div><div class="line">var reversedNames = names.sorted(by: backward)</div><div class="line"></div><div class="line">// 使用闭包表达式</div><div class="line">reversedNames = names.sorted(by: &#123; (s1: String, s2: String) -&gt; Bool in</div><div class="line">    return s1 &gt; s2</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>类型推断（因排序闭包为实际参数来传递给函数，故 Swift 能推断它的形式参数类型和返回类型。）</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">reversedNames = names.sorted(by: &#123; s1, s2 <span class="keyword">in</span> <span class="keyword">return</span> s1 &gt; s2 &#125; )</div></pre></td></tr></table></figure>
<p>从单表达式闭包隐式返回，return 关键字能够被省略<br><code>reversedNames = names.sorted(by: { s1, s2 in s1 &gt; s2 } )</code><br>简写的实际参数名<br><code>reversedNames = names.sorted(by: { $0 &gt; $1 } )</code><br>还有一种更加简化的形式，直接使用操作符&gt;,可以写出这样的前提是闭包定义刚好和操作符的定义吻合。<br><code>reversedNames = names.sorted(by: &gt;)</code></p>
<h1 id="逃逸和非逃逸闭包"><a href="#逃逸和非逃逸闭包" class="headerlink" title="逃逸和非逃逸闭包"></a>逃逸和非逃逸闭包</h1><p>Swift 的闭包分为 逃逸 与 非逃逸 两种。一个接受逃逸闭包作为参数的函数，逃逸闭包（可能）会在函数返回之后才被调用————也就是说，闭包逃离了函数的作用域。</p>
<p>逃逸闭包通常与异步控制流相关联，如下例所示：  </p>
<ul>
<li>一个函数开启了一个后台任务后立即返回，然后通过一个完成回调（completion handler）报告后台任务的结果。</li>
<li>一个视图类把『按钮点击事件执行的操作』封装成一个闭包，并存储为自身的属性。每次用户点击按钮时，都会调用该闭包。闭包会逃离属性的设置器（setter）。</li>
<li>你使用 <code>DispatchQueue.async</code> 在派发队列（dispatch queue）上安排了一个异步执行的任务。这个闭包任务的生命周期会比 async 的作用域活得更长久。<br>与之对应的 <code>DispatchQueue.sync</code>，它会一直等到任务闭包执行完毕后才返回——闭包永远不会逃逸。map 以及标准库中其他的序列和数组的算法也是非逃逸的。</li>
</ul>
<h2 id="为什么区分闭包的逃逸性和非逃逸性如此重要"><a href="#为什么区分闭包的逃逸性和非逃逸性如此重要" class="headerlink" title="为什么区分闭包的逃逸性和非逃逸性如此重要"></a>为什么区分闭包的逃逸性和非逃逸性如此重要</h2><p>简单来说，是为了管理内存。一个闭包会强引用它捕获的所有对象————如果你在闭包中访问了当前对象中的任意属性或实例方法，闭包会持有当前对象，因为这些方法和属性都隐性地携带了一个 self 参数。<br>这种方式很容易导致循环引用，这解释了为什么编译器会要求你在闭包中显式地写出对 self 的引用。这迫使你考虑潜在的循环引用，并使用捕获列表手动处理。<br>然而，使用非逃逸的闭包不会产生循环引用————编译器可以保证在函数返回时闭包会释放它捕获的所有对象。因此，编译器只要求在逃逸闭包中明确对 self 的强引用。显然，使用非逃逸闭包是一个更加愉悦的方案。</p>
<ul>
<li>从 Swift 3.0 开始，非逃逸闭包变成了闭包参数的默认形式。如果你想允许一个闭包参数逃逸，需要给这个类型增加一个 @escaping 的标注。</li>
</ul>
<h2 id="解决闭包循环引用"><a href="#解决闭包循环引用" class="headerlink" title="解决闭包循环引用"></a>解决闭包循环引用</h2><p>解决闭包的循环强引用<br>Swift 提供了一种优雅的方法来解决这个问题，称之为闭包捕获列表（ closuer capture list ）<br>捕获列表中的每一项都由 weak 或 unowned 关键字与类实例的引用（如 self ）成对组成</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">lazy</span> <span class="keyword">var</span> someClosure: (<span class="type">Int</span>, <span class="type">String</span>) -&gt; <span class="type">String</span> = &#123;</div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>, <span class="keyword">weak</span> delegate = <span class="keyword">self</span>.delegate!] (index: <span class="type">Int</span>, stringToProcess: <span class="type">String</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">    <span class="comment">// closure body goes here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://swift.gg/2016/11/15/optional-non-escaping-closures/" target="_blank" rel="external">闭包逃逸和非逃逸</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;闭包概念&quot;&gt;&lt;a href=&quot;#闭包概念&quot; class=&quot;headerlink&quot; title=&quot;闭包概念&quot;&gt;&lt;/a&gt;闭包概念&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;闭包&lt;/strong&gt;是可以在你的代码中被传递和引用的功能性独立模块。Swift 中的闭包和 C 以及 Ob
    
    </summary>
    
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/01/02/hello-world/"/>
    <id>http://yoursite.com/2017/01/02/hello-world/</id>
    <published>2017-01-02T15:52:46.000Z</published>
    <updated>2017-01-02T15:52:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
